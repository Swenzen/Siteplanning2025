const express = require('express');
const router = express.Router();
const connection = require('../db'); // Assurez-vous que la connexion à la base de données est correctement configurée

// Route pour récupérer les données du planning
router.get('/planning-data', (req, res) => {
    const { semaine, annee } = req.query;

    const query = `
        SELECT 
            h.horaire_debut, h.horaire_fin, 
            c.competence, c.competence_id, 
            p.jour_id, j.nom, o.display_order
        FROM Thoraire_competence hc
        JOIN Thoraire h ON hc.horaire_id = h.horaire_id
        JOIN Tcompetence c ON hc.competence_id = c.competence_id
        LEFT JOIN Tplanning p ON h.horaire_id = p.horaire_id AND c.competence_id = p.competence_id AND p.semaine = ? AND p.annee = ?
        LEFT JOIN Tnom j ON p.nom_id = j.nom_id
        LEFT JOIN Tcompetence_order o ON c.competence_id = o.competence_id
        ORDER BY o.display_order ASC, c.competence ASC, h.horaire_debut ASC, h.horaire_fin ASC, p.jour_id ASC
    `;

    connection.query(query, [semaine, annee], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des données du planning :', err.message);
            res.status(500).send('Erreur lors de la récupération des données du planning');
        } else {
            res.json(results);
        }
    });
});

// Route pour insérer ou mettre à jour le planning
router.post('/update-planning', (req, res) => {
    const { semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom } = req.body;

    // Insérer une nouvelle ligne
    const insertQuery = `
        INSERT INTO Tplanning (semaine, annee, jour_id, horaire_id, competence_id, nom_id)
        VALUES (?, ?, ?, (SELECT horaire_id FROM Thoraire WHERE horaire_debut = ? AND horaire_fin = ? LIMIT 1), ?, (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1))
    `;
    connection.query(insertQuery, [semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom], (err, result) => {
        if (err) {
            console.error('Erreur lors de l\'insertion dans le planning :', err.message);
            res.status(500).send('Erreur lors de l\'insertion dans le planning');
        } else {
            res.send('Planning inséré avec succès');
        }
    });
});

// Route pour supprimer une valeur dans le planning
router.post('/remove-planning', (req, res) => {
    const { semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom } = req.body;

    const deleteQuery = `
        DELETE p
        FROM Tplanning p
        JOIN Thoraire h ON p.horaire_id = h.horaire_id
        WHERE p.semaine = ? AND p.annee = ? AND p.jour_id = ? AND h.horaire_debut = ? AND h.horaire_fin = ? AND p.competence_id = ? AND p.nom_id = (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1)
    `;

    connection.query(deleteQuery, [semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom], (err, result) => {
        if (err) {
            console.error('Erreur lors de la suppression du planning :', err.message);
            res.status(500).send('Erreur lors de la suppression du planning');
        } else {
            res.send('Planning supprimé avec succès');
        }
    });
});

// Route pour récupérer les noms disponibles pour les vacances
router.get('/nom-ids-vacances', (req, res) => {
    const { semaine, annee } = req.query;
    const query = `
        SELECT n.nom
        FROM Tnom n
        WHERE n.nom_id NOT IN (
            SELECT v.nom_id
            FROM Tvacances v
            WHERE v.semaine = ? AND v.annee = ?
        )
    `;
    connection.query(query, [semaine, annee], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des noms :', err.message);
            res.status(500).send('Erreur lors de la récupération des noms');
        } else {
            res.json(results.map(row => row.nom));
        }
    });
});

// Route pour ajouter une entrée dans Tvacances
router.post('/add-vacances', (req, res) => {
    const { semaine, annee, nom } = req.body;
    const query = `
        INSERT INTO Tvacances (semaine, annee, nom_id)
        VALUES (?, ?, (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1))
    `;
    connection.query(query, [semaine, annee, nom], (err, result) => {
        if (err) {
            console.error('Erreur lors de l\'ajout dans Tvacances :', err.message);
            res.status(500).send(`Erreur lors de l'ajout dans Tvacances : ${err.message}`);
        } else {
            res.send('Vacances ajoutées avec succès');
        }
    });
});

// Route pour récupérer les données de vacances
router.get('/vacances-data', (req, res) => {
    const { semaine, annee } = req.query;
    const query = `
        SELECT v.vacances_id, v.semaine, v.annee, n.nom
        FROM Tvacances v
        LEFT JOIN Tnom n ON v.nom_id = n.nom_id
        WHERE v.semaine = ? AND v.annee = ?
    `;
    connection.query(query, [semaine, annee], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des données de vacances :', err.message);
            res.status(500).send('Erreur lors de la récupération des données de vacances');
        } else {
            res.json(results);
        }
    });
});

// Route pour supprimer une entrée dans Tvacances
router.post('/remove-vacances', (req, res) => {
    const { semaine, annee, nom } = req.body;
    const query = `
        DELETE FROM Tvacances
        WHERE semaine = ? AND annee = ? AND nom_id = (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1)
    `;
    connection.query(query, [semaine, annee, nom], (err, result) => {
        if (err) {
            console.error('Erreur lors de la suppression dans Tvacances :', err.message);
            res.status(500).send(`Erreur lors de la suppression dans Tvacances : ${err.message}`);
        } else {
            res.send('Vacances supprimées avec succès');
        }
    });
});

// Route pour ajouter un commentaire
router.post('/add-comment', (req, res) => {
    const { semaine, annee, jour_id, nom, commentaire } = req.body;

    const query = `
        INSERT INTO Tcommentaire (semaine, annee, jour_id, nom_id, commentaire)
        VALUES (?, ?, ?, (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1), ?)
    `;

    connection.query(query, [semaine, annee, jour_id, nom, commentaire], (err, result) => {
        if (err) {
            console.error('Erreur lors de l\'ajout du commentaire :', err.message);
            res.status(500).send(`Erreur lors de l'ajout du commentaire : ${err.message}`);
        } else {
            res.send('Commentaire ajouté avec succès');
        }
    });
});



module.exports = router;