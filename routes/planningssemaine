const express = require('express');
const router = express.Router();
const connection = require('../db'); // Assurez-vous que la connexion à la base de données est correctement configurée
const authenticateToken = require('../middleware/auth'); // Importer le middleware d'authentification


router.get('/planning-data', authenticateToken, (req, res) => {
    const { semaine, annee, site_id } = req.query;
    const userSiteIds = req.user.siteIds;

    console.log('Requête reçue pour /planning-data :', { semaine, annee, site_id, userSiteIds });

    if (!site_id || !userSiteIds.includes(String(site_id))) {
        console.error('Accès refusé : site_id non autorisé ou manquant');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site.');
    }

    const query = `
        SELECT 
            h.horaire_debut, h.horaire_fin, 
            c.competence, c.competence_id, 
            p.jour_id, j.nom, j.nom_id, o.display_order
        FROM Thoraire_Tsite ht
        JOIN Thoraire h ON ht.horaire_id = h.horaire_id
        JOIN Thoraire_competence_Tsite hct ON ht.horaire_id = hct.horaire_id AND hct.site_id = ?
        JOIN Tcompetence c ON hct.competence_id = c.competence_id
        LEFT JOIN Tplanning p ON ht.horaire_id = p.horaire_id AND c.competence_id = p.competence_id AND p.semaine = ? AND p.annee = ?
        LEFT JOIN Tplanning_Tsite pts ON p.planning_id = pts.planning_id AND pts.site_id = ?
        LEFT JOIN Tnom j ON p.nom_id = j.nom_id
        LEFT JOIN Tcompetence_order o ON c.competence_id = o.competence_id
        WHERE ht.site_id = ?
        ORDER BY o.display_order ASC, c.competence ASC, h.horaire_debut ASC, h.horaire_fin ASC, p.jour_id ASC
    `;

    connection.query(query, [site_id, semaine, annee, site_id, site_id], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des données du planning :', err.message);
            return res.status(500).send('Erreur lors de la récupération des données du planning.');
        }

        console.log('Données du planning récupérées :', results);
        res.json(results);
    });
});

// Route pour insérer ou mettre à jour le planning

router.post('/update-planning', authenticateToken, (req, res) => {
    const { semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom, site_id } = req.body;
    const userSiteIds = req.user.siteIds; // Récupérer les siteIds autorisés depuis le token

    console.log('Données reçues pour la mise à jour du planning :', { semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom, site_id, userSiteIds });

    if (!site_id || !userSiteIds.includes(String(site_id))) {
        console.error('Accès refusé : site_id non autorisé');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site.');
    }

    if (!semaine || !annee || !jour_id || !horaire_debut || !horaire_fin || !competence_id || !nom) {
        console.error('Données manquantes pour la mise à jour du planning.');
        return res.status(400).send('Données manquantes pour la mise à jour du planning.');
    }

    const insertPlanningQuery = `
        INSERT INTO Tplanning (semaine, annee, jour_id, horaire_id, competence_id, nom_id)
        VALUES (?, ?, ?, 
            (SELECT horaire_id FROM Thoraire WHERE horaire_debut = ? AND horaire_fin = ? LIMIT 1), 
            ?, 
            (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1)
        )
        ON DUPLICATE KEY UPDATE
            horaire_id = VALUES(horaire_id),
            competence_id = VALUES(competence_id),
            nom_id = VALUES(nom_id)
    `;

    const planningParams = [semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom];

    connection.query(insertPlanningQuery, planningParams, (err, result) => {
        if (err) {
            console.error('Erreur lors de la mise à jour du planning :', err.message);
            return res.status(500).send('Erreur lors de la mise à jour du planning.');
        }

        console.log('Planning mis à jour avec succès :', result);

        const insertPlanningSiteQuery = `
            INSERT INTO Tplanning_Tsite (planning_id, site_id)
            VALUES (?, ?)
            ON DUPLICATE KEY UPDATE site_id = VALUES(site_id)
        `;

        const planningId = result.insertId;
        connection.query(insertPlanningSiteQuery, [planningId, site_id], (err) => {
            if (err) {
                console.error('Erreur lors de la mise à jour de Tplanning_Tsite :', err.message);
                return res.status(500).send('Erreur lors de la mise à jour de Tplanning_Tsite.');
            }

            console.log('Tplanning_Tsite mis à jour avec succès.');
            res.send('Planning mis à jour avec succès.');
        });
    });
});

// Route pour supprimer une valeur dans le planning
router.post('/remove-planning', authenticateToken, (req, res) => {
    const { semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom, site_id } = req.body;
    const userSiteIds = req.user.siteIds; // Récupérer les siteIds autorisés depuis le token

    console.log('Données reçues pour /remove-planning :', { semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom, site_id, userSiteIds });

    if (!site_id || !userSiteIds.includes(String(site_id))) {
        console.error('Accès refusé : site_id non autorisé');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site.');
    }

    if (!semaine || !annee || !jour_id || !horaire_debut || !horaire_fin || !competence_id || !nom) {
        console.error('Données manquantes pour la suppression du planning.');
        return res.status(400).send('Données manquantes pour la suppression du planning.');
    }

    const deletePlanningQuery = `
        DELETE p
        FROM Tplanning p
        JOIN Tplanning_Tsite pts ON p.planning_id = pts.planning_id
        WHERE p.semaine = ? AND p.annee = ? AND p.jour_id = ?
        AND p.horaire_id = (SELECT horaire_id FROM Thoraire WHERE horaire_debut = ? AND horaire_fin = ? LIMIT 1)
        AND p.competence_id = ?
        AND p.nom_id = (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1)
        AND pts.site_id = ?
    `;

    const params = [semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom, site_id];

    connection.query(deletePlanningQuery, params, (err, result) => {
        if (err) {
            console.error('Erreur lors de la suppression du planning :', err.message);
            return res.status(500).send('Erreur lors de la suppression du planning.');
        }

        if (result.affectedRows === 0) {
            console.warn('Aucune ligne supprimée. Vérifiez les paramètres fournis.');
            return res.status(404).send('Aucune donnée trouvée pour la suppression.');
        }

        console.log('Planning supprimé avec succès :', result);
        res.send('Planning supprimé avec succès.');
    });
});
// Route pour récupérer les noms disponibles pour les vacances
router.get('/nom-ids-vacances', authenticateToken, (req, res) => {
    const { semaine, annee } = req.query;
    const siteId = req.user.siteIds[0]; // Récupérer le site_id depuis le token utilisateur

    const query = `
        SELECT n.nom
        FROM Tnom n
        JOIN Tnom_Tsite nts ON n.nom_id = nts.nom_id
        WHERE nts.site_id = ? -- Vérifier que le nom est associé au site
        AND n.nom_id NOT IN (
            SELECT v.nom_id
            FROM Tvacances v
            JOIN Tvacances_Tsite vt ON v.vacances_id = vt.vacances_id
            WHERE v.semaine = ? AND v.annee = ? AND vt.site_id = ?
        )
    `;

    connection.query(query, [siteId, semaine, annee, siteId], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des noms :', err.message);
            res.status(500).send('Erreur lors de la récupération des noms');
        } else {
            res.json(results.map(row => row.nom));
        }
    });
});
// Route pour ajouter une entrée dans Tvacances
router.post('/add-vacances', authenticateToken, (req, res) => {
    const { semaine, annee, nom, site_id } = req.body;

    const queryVacances = `
        INSERT INTO Tvacances (semaine, annee, nom_id)
        VALUES (?, ?, (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1))
    `;

    connection.query(queryVacances, [semaine, annee, nom], (err, result) => {
        if (err) {
            console.error('Erreur lors de l\'ajout dans Tvacances :', err.message);
            res.status(500).send(`Erreur lors de l'ajout dans Tvacances : ${err.message}`);
        } else {
            const vacancesId = result.insertId; // Récupérer l'ID de la nouvelle entrée
            const queryTsite = `
                INSERT INTO Tvacances_Tsite (vacances_id, site_id)
                VALUES (?, ?)
            `;
            connection.query(queryTsite, [vacancesId, site_id], (err) => {
                if (err) {
                    console.error('Erreur lors de l\'ajout dans Tvacances_Tsite :', err.message);
                    res.status(500).send(`Erreur lors de l'ajout dans Tvacances_Tsite : ${err.message}`);
                } else {
                    res.send('Vacances ajoutées avec succès');
                }
            });
        }
    });
});

// Route pour récupérer les données de vacances pour un site spécifique
router.get('/vacances-data', authenticateToken, (req, res) => {
    const { semaine, annee } = req.query;
    const siteId = req.user.siteIds[0]; // Récupérer le site_id depuis le token utilisateur

    const query = `
        SELECT v.vacances_id, v.semaine, v.annee, n.nom
        FROM Tvacances v
        JOIN Tvacances_Tsite vt ON v.vacances_id = vt.vacances_id
        JOIN Tnom n ON v.nom_id = n.nom_id
        WHERE v.semaine = ? AND v.annee = ? AND vt.site_id = ?
    `;

    connection.query(query, [semaine, annee, siteId], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des données de vacances :', err.message);
            res.status(500).send('Erreur lors de la récupération des données de vacances');
        } else {
            res.json(results);
        }
    });
});

// Route pour supprimer une entrée dans Tvacances
router.post('/remove-vacances', authenticateToken, (req, res) => {
    const { semaine, annee, nom, site_id } = req.body;

    const query = `
        DELETE v, vt
        FROM Tvacances v
        JOIN Tvacances_Tsite vt ON v.vacances_id = vt.vacances_id
        WHERE v.semaine = ? AND v.annee = ? AND v.nom_id = (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1)
        AND vt.site_id = ?
    `;

    connection.query(query, [semaine, annee, nom, site_id], (err, result) => {
        if (err) {
            console.error('Erreur lors de la suppression dans Tvacances :', err.message);
            res.status(500).send(`Erreur lors de la suppression dans Tvacances : ${err.message}`);
        } else {
            res.send('Vacances supprimées avec succès');
        }
    });
});

// Route pour ajouter un commentaire
router.post('/add-comment', authenticateToken, (req, res) => {
    const { semaine, annee, jour_id, nom, commentaire, site_id } = req.body;
    const userSiteIds = req.user.siteIds;

    console.log('Données reçues pour /add-comment :', { semaine, annee, jour_id, nom, commentaire, site_id, userSiteIds });

    if (!site_id || !userSiteIds.includes(String(site_id))) {
        console.error('Accès refusé : site_id non autorisé');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site.');
    }

    if (!semaine || !annee || !jour_id || !nom || !commentaire) {
        console.error('Données manquantes pour l\'ajout du commentaire.');
        return res.status(400).send('Données manquantes pour l\'ajout du commentaire.');
    }

    const insertCommentQuery = `
        INSERT INTO Tcommentaire (semaine, annee, jour_id, nom_id, commentaire)
        VALUES (?, ?, ?, 
            (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1), 
            ?
        )
    `;

    const params = [semaine, annee, jour_id, nom, commentaire];

    connection.query(insertCommentQuery, params, (err, result) => {
        if (err) {
            console.error('Erreur lors de l\'ajout du commentaire :', err.message);
            return res.status(500).send('Erreur lors de l\'ajout du commentaire.');
        }

        const commentaireId = result.insertId;

        // Ajouter la liaison dans Tcommentaire_Tsite
        const insertCommentSiteQuery = `
            INSERT INTO Tcommentaire_Tsite (commentaire_id, site_id)
            VALUES (?, ?)
        `;

        connection.query(insertCommentSiteQuery, [commentaireId, site_id], (err) => {
            if (err) {
                console.error('Erreur lors de l\'ajout de la liaison Tcommentaire_Tsite :', err.message);
                return res.status(500).send('Erreur lors de l\'ajout de la liaison Tcommentaire_Tsite.');
            }

            console.log('Commentaire ajouté avec succès et lié au site.');
            res.send('Commentaire ajouté avec succès.');
        });
    });
});


// Route pour récupérer les commentaires pour un site spécifique
// Route pour récupérer les commentaires pour un site spécifique
router.get('/comments', authenticateToken, (req, res) => {
    const { semaine, annee, site_id } = req.query;
    const userSiteIds = req.user.siteIds; // Récupérer les siteIds autorisés depuis le token

    console.log('Paramètres reçus par la route /comments :', { semaine, annee, site_id, userSiteIds });

    // Vérifier que le site_id est fourni et que l'utilisateur y a accès
    if (!site_id || !userSiteIds.includes(String(site_id))) {
        console.error('Accès refusé : site_id non autorisé ou manquant.');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site.');
    }

    if (!semaine || !annee) {
        console.error('Erreur : Les paramètres "semaine" et "annee" sont requis.');
        return res.status(400).send('Erreur : Les paramètres "semaine" et "annee" sont requis.');
    }

    // Requête SQL pour récupérer les commentaires
    const query = `
        SELECT 
            c.commentaire_id, c.semaine, c.annee, c.jour_id, c.nom_id, c.commentaire, 
            comp.competence, h.horaire_debut, h.horaire_fin
        FROM 
            Tcommentaire c
        JOIN 
            Tcommentaire_Tsite ct ON c.commentaire_id = ct.commentaire_id
        JOIN 
            Tplanning p ON c.nom_id = p.nom_id AND c.semaine = p.semaine AND c.annee = p.annee AND c.jour_id = p.jour_id
        JOIN 
            Tcompetence comp ON p.competence_id = comp.competence_id
        JOIN 
            Thoraire h ON p.horaire_id = h.horaire_id
        WHERE 
            c.semaine = ? AND c.annee = ? AND ct.site_id = ?
    `;

    connection.query(query, [semaine, annee, site_id], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des commentaires :', err.message);
            return res.status(500).send('Erreur lors de la récupération des commentaires.');
        }

        console.log('Commentaires récupérés :', results);
        res.json(results);
    });
});



// Route pour récupérer les commentaires spécifiques à un nom, jour, semaine et année (en clic droit)
router.get('/comment', authenticateToken, (req, res) => {
    const { nom_id, jour_id, semaine, annee } = req.query;
    const siteId = req.user.siteIds[0]; // Récupérer le site_id depuis le token utilisateur

    if (!nom_id || !jour_id || !semaine || !annee || !siteId) {
        console.error('Erreur : paramètres manquants.');
        return res.status(400).send('Les champs "nom_id", "jour_id", "semaine", "annee" et "site_id" sont requis.');
    }

    const query = `
        SELECT 
            c.commentaire_id, c.commentaire
        FROM 
            Tcommentaire c
        JOIN 
            Tcommentaire_Tsite ct ON c.commentaire_id = ct.commentaire_id
        WHERE 
            c.nom_id = ? AND c.jour_id = ? AND c.semaine = ? AND c.annee = ? AND ct.site_id = ?
    `;

    connection.query(query, [nom_id, jour_id, semaine, annee, siteId], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des commentaires :', err.message);
            return res.status(500).send('Erreur lors de la récupération des commentaires.');
        }

        res.json(results);
    });
});


// Route pour supprimer un commentaire spécifique
router.delete('/delete-comment', authenticateToken, (req, res) => {
    const { comment_id } = req.query;
    const siteId = req.user.siteIds[0]; // Récupérer le site_id depuis le token utilisateur

    if (!comment_id || !siteId) {
        console.error('Erreur : paramètres manquants.');
        return res.status(400).send('Les champs "comment_id" et "site_id" sont requis.');
    }

    const query = `
        DELETE c, ct
        FROM Tcommentaire c
        JOIN Tcommentaire_Tsite ct ON c.commentaire_id = ct.commentaire_id
        WHERE c.commentaire_id = ? AND ct.site_id = ?
    `;

    connection.query(query, [comment_id, siteId], (err, results) => {
        if (err) {
            console.error('Erreur lors de la suppression du commentaire :', err.message);
            return res.status(500).send('Erreur lors de la suppression du commentaire.');
        }

        res.send('Commentaire supprimé avec succès');
    });
});

// Route pour ajouter une entrée dans Tfermeture
router.post('/add-fermeture', (req, res) => {
    const { jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin } = req.body;

    const query = `
        INSERT INTO Tfermeture (fermeture, jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin)
        VALUES (true, ?, ?, ?, ?, ?, ?)
    `;

    connection.query(query, [jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin], (err, result) => {
        if (err) {
            console.error('Erreur lors de l\'ajout dans Tfermeture :', err.message);
            res.status(500).send(`Erreur lors de l'ajout dans Tfermeture : ${err.message}`);
        } else {
            res.send('Fermeture ajoutée avec succès');
        }
    });
});

// Route pour récupérer les fermetures
router.get('/fermetures', (req, res) => {
    const { semaine, annee } = req.query;

    const query = `
        SELECT jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin
        FROM Tfermeture
        WHERE semaine = ? AND annee = ?
    `;

    connection.query(query, [semaine, annee], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des fermetures :', err.message);
            res.status(500).send('Erreur lors de la récupération des fermetures');
        } else {
            res.json(results);
        }
    });
});

// Route pour supprimer une entrée dans Tfermeture
router.delete('/remove-fermeture', (req, res) => {
    const { jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin } = req.body;

    const query = `
        DELETE FROM Tfermeture
        WHERE jour_id = ? AND semaine = ? AND annee = ? AND competence_id = ? AND horaire_debut = ? AND horaire_fin = ?
    `;

    connection.query(query, [jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin], (err, result) => {
        if (err) {
            console.error('Erreur lors de la suppression dans Tfermeture :', err.message);
            res.status(500).send(`Erreur lors de la suppression dans Tfermeture : ${err.message}`);
        } else {
            res.send('Fermeture supprimée avec succès');
        }
    });
});

// Route pour compter le nombre de horaire_competence
router.get('/count-horaire-competence', (req, res) => {
    const { jour_id, semaine, annee } = req.query;
    const query = `
        SELECT COUNT(*) AS count
        FROM Thoraire_competence hc
        WHERE hc.competence_id NOT IN (
            SELECT f.competence_id
            FROM Tfermeture f
            WHERE f.jour_id = ? AND f.semaine = ? AND f.annee = ?
        )
        AND hc.competence_id NOT IN (
            SELECT p.competence_id
            FROM Tplanning p
            WHERE p.jour_id = ? AND p.semaine = ? AND p.annee = ?
        )
    `;

    const params = [jour_id, semaine, annee, jour_id, semaine, annee];


    connection.query(query, params, (err, results) => {
        if (err) {
            console.error('Erreur lors du comptage des horaire_competence :', err.message);
            res.status(500).send('Erreur lors du comptage des horaire_competence');
        } else {
            res.json(results[0]);
        }
    });
});

// Route pour récupérer les noms disponibles pour un jour spécifique
router.get('/available-names', async (req, res) => {
    const { jour_id, semaine, annee } = req.query;

    try {
        // Récupérer la liste des tables Tjrepos_
        const tablesQuery = `
            SELECT TABLE_NAME
            FROM information_schema.tables
            WHERE table_schema = 'planning2' AND table_name LIKE 'tjrepos_%'
        `;
        const [tablesResults] = await connection.promise().query(tablesQuery);
        const tables = tablesResults.map(row => row.TABLE_NAME);

        // Construire dynamiquement la requête SQL pour exclure les noms dans les tables Tjrepos_
        const unionQueries = tables.map(table => `
            SELECT nom_id FROM ${table} WHERE jour_id = ? AND semaine = ? AND annee = ?
        `).join(' UNION ALL ');

        const query = `
            SELECT n.nom
            FROM Tnom n
            WHERE n.nom_id NOT IN (
                SELECT p.nom_id
                FROM Tplanning p
                WHERE p.jour_id = ? AND p.semaine = ? AND p.annee = ?
            )
            AND n.nom_id NOT IN (
                SELECT v.nom_id
                FROM Tvacances v
                WHERE v.semaine = ? AND v.annee = ?
            )
            ${unionQueries ? `AND n.nom_id NOT IN (${unionQueries})` : ''}
        `;

        const params = [
            jour_id, semaine, annee, // Pour Tplanning
            semaine, annee,          // Pour Tvacances
            ...tables.flatMap(() => [jour_id, semaine, annee]) // Pour les tables Tjrepos_
        ];

        connection.query(query, params, (err, results) => {
            if (err) {
                console.error('Erreur lors de la récupération des noms disponibles :', err.message);
                res.status(500).send('Erreur lors de la récupération des noms disponibles');
            } else {
                res.json(results.map(row => row.nom));
            }
        });
    } catch (error) {
        console.error('Erreur lors de la récupération des tables Tjrepos_ :', error.message);
        res.status(500).send('Erreur lors de la récupération des tables Tjrepos_');
    }
});

module.exports = router;