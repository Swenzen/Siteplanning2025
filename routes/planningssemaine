const express = require('express');
const router = express.Router();
const connection = require('../db'); // Assurez-vous que la connexion à la base de données est correctement configurée

// Route pour récupérer les données du planning
router.get('/planning-data', (req, res) => {
    const { semaine, annee } = req.query;

    const query = `
        SELECT 
            h.horaire_debut, h.horaire_fin, 
            c.competence, c.competence_id, 
            p.jour_id, j.nom, j.nom_id, o.display_order
        FROM Thoraire_competence hc
        JOIN Thoraire h ON hc.horaire_id = h.horaire_id
        JOIN Tcompetence c ON hc.competence_id = c.competence_id
        LEFT JOIN Tplanning p ON h.horaire_id = p.horaire_id AND c.competence_id = p.competence_id AND p.semaine = ? AND p.annee = ?
        LEFT JOIN Tnom j ON p.nom_id = j.nom_id
        LEFT JOIN Tcompetence_order o ON c.competence_id = o.competence_id
        ORDER BY o.display_order ASC, c.competence ASC, h.horaire_debut ASC, h.horaire_fin ASC, p.jour_id ASC
    `;

    connection.query(query, [semaine, annee], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des données du planning :', err.message);
            res.status(500).send('Erreur lors de la récupération des données du planning');
        } else {
            res.json(results);
        }
    });
});

// Route pour insérer ou mettre à jour le planning
router.post('/update-planning', (req, res) => {
    const { semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom } = req.body;

    // Insérer une nouvelle ligne
    const insertQuery = `
        INSERT INTO Tplanning (semaine, annee, jour_id, horaire_id, competence_id, nom_id)
        VALUES (?, ?, ?, (SELECT horaire_id FROM Thoraire WHERE horaire_debut = ? AND horaire_fin = ? LIMIT 1), ?, (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1))
    `;
    connection.query(insertQuery, [semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom], (err, result) => {
        if (err) {
            console.error('Erreur lors de l\'insertion dans le planning :', err.message);
            res.status(500).send('Erreur lors de l\'insertion dans le planning');
        } else {
            res.send('Planning inséré avec succès');
        }
    });
});

// Route pour supprimer une valeur dans le planning
router.post('/remove-planning', (req, res) => {
    const { semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom } = req.body;

    const deleteQuery = `
        DELETE p
        FROM Tplanning p
        JOIN Thoraire h ON p.horaire_id = h.horaire_id
        WHERE p.semaine = ? AND p.annee = ? AND p.jour_id = ? AND h.horaire_debut = ? AND h.horaire_fin = ? AND p.competence_id = ? AND p.nom_id = (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1)
    `;

    connection.query(deleteQuery, [semaine, annee, jour_id, horaire_debut, horaire_fin, competence_id, nom], (err, result) => {
        if (err) {
            console.error('Erreur lors de la suppression du planning :', err.message);
            res.status(500).send('Erreur lors de la suppression du planning');
        } else {
            res.send('Planning supprimé avec succès');
        }
    });
});

// Route pour récupérer les noms disponibles pour les vacances
router.get('/nom-ids-vacances', (req, res) => {
    const { semaine, annee } = req.query;
    const query = `
        SELECT n.nom
        FROM Tnom n
        WHERE n.nom_id NOT IN (
            SELECT v.nom_id
            FROM Tvacances v
            WHERE v.semaine = ? AND v.annee = ?
        )
    `;
    connection.query(query, [semaine, annee], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des noms :', err.message);
            res.status(500).send('Erreur lors de la récupération des noms');
        } else {
            res.json(results.map(row => row.nom));
        }
    });
});

// Route pour ajouter une entrée dans Tvacances
router.post('/add-vacances', (req, res) => {
    const { semaine, annee, nom } = req.body;
    const query = `
        INSERT INTO Tvacances (semaine, annee, nom_id)
        VALUES (?, ?, (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1))
    `;
    connection.query(query, [semaine, annee, nom], (err, result) => {
        if (err) {
            console.error('Erreur lors de l\'ajout dans Tvacances :', err.message);
            res.status(500).send(`Erreur lors de l'ajout dans Tvacances : ${err.message}`);
        } else {
            res.send('Vacances ajoutées avec succès');
        }
    });
});

// Route pour récupérer les données de vacances
router.get('/vacances-data', (req, res) => {
    const { semaine, annee } = req.query;
    const query = `
        SELECT v.vacances_id, v.semaine, v.annee, n.nom
        FROM Tvacances v
        LEFT JOIN Tnom n ON v.nom_id = n.nom_id
        WHERE v.semaine = ? AND v.annee = ?
    `;
    connection.query(query, [semaine, annee], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des données de vacances :', err.message);
            res.status(500).send('Erreur lors de la récupération des données de vacances');
        } else {
            res.json(results);
        }
    });
});

// Route pour supprimer une entrée dans Tvacances
router.post('/remove-vacances', (req, res) => {
    const { semaine, annee, nom } = req.body;
    const query = `
        DELETE FROM Tvacances
        WHERE semaine = ? AND annee = ? AND nom_id = (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1)
    `;
    connection.query(query, [semaine, annee, nom], (err, result) => {
        if (err) {
            console.error('Erreur lors de la suppression dans Tvacances :', err.message);
            res.status(500).send(`Erreur lors de la suppression dans Tvacances : ${err.message}`);
        } else {
            res.send('Vacances supprimées avec succès');
        }
    });
});

// Route pour ajouter un commentaire
router.post('/add-comment', (req, res) => {
    const { semaine, annee, jour_id, nom, commentaire } = req.body;

    const query = `
        INSERT INTO Tcommentaire (semaine, annee, jour_id, nom_id, commentaire)
        VALUES (?, ?, ?, (SELECT nom_id FROM Tnom WHERE nom = ? LIMIT 1), ?)
    `;

    connection.query(query, [semaine, annee, jour_id, nom, commentaire], (err, result) => {
        if (err) {
            console.error('Erreur lors de l\'ajout du commentaire :', err.message);
            res.status(500).send(`Erreur lors de l'ajout du commentaire : ${err.message}`);
        } else {
            res.send('Commentaire ajouté avec succès');
        }
    });
});


// Route pour récupérer les commentaires
router.get('/comments', (req, res) => {
    const { semaine, annee } = req.query;

    const query = `
        SELECT 
            c.semaine, c.annee, c.jour_id, c.nom_id, c.commentaire, 
            comp.competence, h.horaire_debut, h.horaire_fin
        FROM 
            Tcommentaire c
        JOIN 
            Tplanning p ON c.nom_id = p.nom_id AND c.semaine = p.semaine AND c.annee = p.annee AND c.jour_id = p.jour_id
        JOIN 
            Tcompetence comp ON p.competence_id = comp.competence_id
        JOIN 
            Thoraire h ON p.horaire_id = h.horaire_id
        WHERE 
            c.semaine = ? AND c.annee = ?
    `;

    connection.query(query, [semaine, annee], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des commentaires :', err.message);
            res.status(500).send('Erreur lors de la récupération des commentaires');
        } else {
            res.json(results);
        }
    });
});

// Route pour récupérer tous les commentaires spécifiques
router.get('/comment', (req, res) => {
    const { nom_id, jour_id, semaine, annee } = req.query;

    const query = `
        SELECT commentaire_id, commentaire
        FROM Tcommentaire
        WHERE nom_id = ? AND jour_id = ? AND semaine = ? AND annee = ?
    `;

    connection.query(query, [nom_id, jour_id, semaine, annee], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des commentaires :', err.message);
            res.status(500).send('Erreur lors de la récupération des commentaires');
        } else {
            res.json(results);
        }
    });
});


// Route pour supprimer un commentaire spécifique
router.delete('/delete-comment', (req, res) => {
    const { comment_id } = req.query;

    const query = `
        DELETE FROM Tcommentaire
        WHERE commentaire_id = ?
    `;

    connection.query(query, [comment_id], (err, results) => {
        if (err) {
            console.error('Erreur lors de la suppression du commentaire :', err.message);
            res.status(500).send('Erreur lors de la suppression du commentaire');
        } else {
            res.sendStatus(204); // No Content
        }
    });
});

// Route pour ajouter une entrée dans Tfermeture
router.post('/add-fermeture', (req, res) => {
    const { jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin } = req.body;

    const query = `
        INSERT INTO Tfermeture (fermeture, jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin)
        VALUES (true, ?, ?, ?, ?, ?, ?)
    `;

    connection.query(query, [jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin], (err, result) => {
        if (err) {
            console.error('Erreur lors de l\'ajout dans Tfermeture :', err.message);
            res.status(500).send(`Erreur lors de l'ajout dans Tfermeture : ${err.message}`);
        } else {
            res.send('Fermeture ajoutée avec succès');
        }
    });
});

// Route pour récupérer les fermetures
router.get('/fermetures', (req, res) => {
    const { semaine, annee } = req.query;

    const query = `
        SELECT jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin
        FROM Tfermeture
        WHERE semaine = ? AND annee = ?
    `;

    connection.query(query, [semaine, annee], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des fermetures :', err.message);
            res.status(500).send('Erreur lors de la récupération des fermetures');
        } else {
            res.json(results);
        }
    });
});

// Route pour supprimer une entrée dans Tfermeture
router.delete('/remove-fermeture', (req, res) => {
    const { jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin } = req.body;

    const query = `
        DELETE FROM Tfermeture
        WHERE jour_id = ? AND semaine = ? AND annee = ? AND competence_id = ? AND horaire_debut = ? AND horaire_fin = ?
    `;

    connection.query(query, [jour_id, semaine, annee, competence_id, horaire_debut, horaire_fin], (err, result) => {
        if (err) {
            console.error('Erreur lors de la suppression dans Tfermeture :', err.message);
            res.status(500).send(`Erreur lors de la suppression dans Tfermeture : ${err.message}`);
        } else {
            res.send('Fermeture supprimée avec succès');
        }
    });
});

// Route pour compter le nombre de horaire_competence
router.get('/count-horaire-competence', (req, res) => {
    const { jour_id, semaine, annee } = req.query;
    console.log('Route /count-horaire-competence appelée avec les paramètres :', { jour_id, semaine, annee });

    const query = `
        SELECT COUNT(*) AS count
        FROM Thoraire_competence hc
        WHERE hc.competence_id NOT IN (
            SELECT f.competence_id
            FROM Tfermeture f
            WHERE f.jour_id = ? AND f.semaine = ? AND f.annee = ?
        )
    `;

    const params = [jour_id, semaine, annee];

    console.log('Requête SQL construite :', query);
    console.log('Paramètres de la requête SQL :', params);

    connection.query(query, params, (err, results) => {
        if (err) {
            console.error('Erreur lors du comptage des horaire_competence :', err.message);
            res.status(500).send('Erreur lors du comptage des horaire_competence');
        } else {
            console.log(`Nombre de horaire_competence : ${results[0].count}`); // Log pour afficher le nombre de horaire_competence
            res.json(results[0]);
        }
    });
});

// Route pour récupérer les noms disponibles pour un jour spécifique
router.get('/available-names', async (req, res) => {
    const { jour_id, semaine, annee } = req.query;

    try {
        console.log('Requête reçue pour /available-names avec les paramètres :', { jour_id, semaine, annee });

        // Récupérer la liste des tables Tjrepos_
        const tablesQuery = `
            SELECT TABLE_NAME
            FROM information_schema.tables
            WHERE table_schema = 'planning2' AND table_name LIKE 'tjrepos_%'
        `;
        const [tablesResults] = await connection.promise().query(tablesQuery);
        console.log('Résultats de tablesQuery :', tablesResults); // Log pour vérifier les résultats de tablesQuery
        const tables = tablesResults.map(row => row.TABLE_NAME);

        // Vérifier que les noms des tables sont correctement récupérés
        if (tables.length === 0) {
            console.log('Aucune table Tjrepos_ trouvée');
        } else {
            console.log('Tables Tjrepos_ trouvées :', tables);
        }

        // Construire dynamiquement la requête SQL pour exclure les noms dans les tables Tjrepos_
        const unionQueries = tables.map(table => `
            SELECT nom_id FROM ${table} WHERE jour_id = ? AND semaine = ? AND annee = ?
        `).join(' UNION ALL ');

        const query = `
            SELECT n.nom
            FROM Tnom n
            WHERE n.nom_id NOT IN (
                SELECT p.nom_id
                FROM Tplanning p
                WHERE p.jour_id = ? AND p.semaine = ? AND p.annee = ?
            )
            AND n.nom_id NOT IN (
                SELECT v.nom_id
                FROM Tvacances v
                WHERE v.semaine = ? AND v.annee = ?
            )
            ${unionQueries ? `AND n.nom_id NOT IN (${unionQueries})` : ''}
        `;

        const params = [jour_id, semaine, annee, semaine, annee, ...tables.flatMap(() => [jour_id, semaine, annee])];

        console.log('Requête SQL construite :', query);
        console.log('Paramètres de la requête SQL :', params);

        connection.query(query, params, (err, results) => {
            if (err) {
                console.error('Erreur lors de la récupération des noms disponibles :', err.message);
                res.status(500).send('Erreur lors de la récupération des noms disponibles');
            } else {
                console.log('Résultats de la requête :', results);
                res.json(results.map(row => row.nom));
            }
        });
    } catch (error) {
        console.error('Erreur lors de la récupération des tables Tjrepos_ :', error.message);
        res.status(500).send('Erreur lors de la récupération des tables Tjrepos_');
    }
});

module.exports = router;