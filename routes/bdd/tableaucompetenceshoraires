const express = require('express');
const router = express.Router();
const connection = require('../../db');
const authenticateToken = require('../../middleware/auth');

// Route pour récupérer les horaires par compétence et site (protégée)
router.get('/horaires-competences', authenticateToken, (req, res) => {
    const siteId = req.query.site_id; // Récupérer le site_id depuis la requête
    const userSiteIds = req.user.siteIds; // Récupérer les siteIds autorisés depuis le token

    console.log('Requête reçue pour /horaires-competences :', { siteId, userSiteIds });

    // Vérifier que le site_id est dans la liste des sites autorisés
    if (!userSiteIds.includes(String(siteId))) {
        console.error('Accès refusé : site_id non autorisé');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site.');
    }

    const query = `
        SELECT h.horaire_id, h.horaire_debut, h.horaire_fin, c.competence_id
        FROM Thoraire h
        JOIN Thoraire_Tsite ht ON h.horaire_id = ht.horaire_id
        LEFT JOIN Thoraire_competence_Tsite hct ON h.horaire_id = hct.horaire_id AND hct.site_id = ?
        LEFT JOIN Tcompetence c ON hct.competence_id = c.competence_id
        WHERE ht.site_id = ?
    `;

    connection.query(query, [siteId, siteId], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des horaires par compétence :', err.message);
            return res.status(500).send('Erreur lors de la récupération des horaires par compétence');
        }

        console.log('Résultats de la requête :', results);

        const groupedData = results.reduce((acc, row) => {
            if (!acc[row.horaire_id]) {
                acc[row.horaire_id] = {
                    horaire_id: row.horaire_id,
                    horaire_debut: row.horaire_debut,
                    horaire_fin: row.horaire_fin,
                    competences: []
                };
            }
            if (row.competence_id) {
                acc[row.horaire_id].competences.push(row.competence_id);
            }
            return acc;
        }, {});

        res.json(Object.values(groupedData));
    });
});

router.post('/add-horaire-competence', authenticateToken, (req, res) => {
    const { horaire_id, competence_id, site_id } = req.body;
    const userSiteIds = req.user.siteIds; // Récupérer les siteIds autorisés depuis le token

    console.log('Requête reçue pour /add-horaire-competence :', { horaire_id, competence_id, site_id, userSiteIds });

    if (!horaire_id || !competence_id || !site_id) {
        return res.status(400).send('Les champs "horaire_id", "competence_id" et "site_id" sont requis');
    }

    // Vérifier que le site_id est dans la liste des sites autorisés
    if (!userSiteIds.includes(String(site_id))) {
        console.error('Accès refusé : site_id non autorisé');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site');
    }

    const query = `
        INSERT INTO Thoraire_competence_Tsite (horaire_id, competence_id, site_id)
        VALUES (?, ?, ?)
    `;

    connection.query(query, [horaire_id, competence_id, site_id], (err) => {
        if (err) {
            console.error('Erreur lors de l\'ajout de la compétence à l\'horaire :', err.message);
            return res.status(500).send('Erreur lors de l\'ajout de la compétence à l\'horaire');
        }

        res.send('Compétence ajoutée à l\'horaire avec succès');
    });
});

router.post('/delete-horaire-competence', authenticateToken, (req, res) => {
    const { horaire_id, competence_id, site_id } = req.body;
    const userSiteIds = req.user.siteIds; // Récupérer les siteIds autorisés depuis le token

    console.log('Requête reçue pour /delete-horaire-competence :', { horaire_id, competence_id, site_id, userSiteIds });

    if (!horaire_id || !competence_id || !site_id) {
        return res.status(400).send('Les champs "horaire_id", "competence_id" et "site_id" sont requis');
    }

    // Vérifier que le site_id est dans la liste des sites autorisés
    if (!userSiteIds.includes(String(site_id))) {
        console.error('Accès refusé : site_id non autorisé');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site');
    }

    const query = `
        DELETE FROM Thoraire_competence_Tsite
        WHERE horaire_id = ? AND competence_id = ? AND site_id = ?
    `;

    connection.query(query, [horaire_id, competence_id, site_id], (err) => {
        if (err) {
            console.error('Erreur lors de la suppression de la compétence de l\'horaire :', err.message);
            return res.status(500).send('Erreur lors de la suppression de la compétence de l\'horaire');
        }

        res.send('Compétence supprimée de l\'horaire avec succès');
    });
});

router.get('/horaire-competence-jours', authenticateToken, (req, res) => {
    const siteId = req.query.site_id;

    if (!siteId) {
        return res.status(400).send('Le site_id est requis.');
    }

    const query = `
        SELECT h.horaire_id, h.horaire_debut, h.horaire_fin, 
               c.competence_id, c.competence, 
               j.jour_id, j.jour
        FROM Thoraire h
        JOIN Thoraire_Tsite ht ON h.horaire_id = ht.horaire_id
        JOIN Thoraire_competence_Tsite hct ON h.horaire_id = hct.horaire_id AND hct.site_id = ht.site_id
        JOIN Tcompetence c ON hct.competence_id = c.competence_id
        JOIN Tjour j
        LEFT JOIN Thoraire_competence_jour hcj 
               ON h.horaire_id = hcj.horaire_id 
               AND c.competence_id = hcj.competence_id 
               AND hcj.jour_id = j.jour_id
        WHERE ht.site_id = ?
        ORDER BY h.horaire_id, c.competence_id, j.jour_id;
    `;

    connection.query(query, [siteId], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des données :', err.message);
            return res.status(500).send('Erreur lors de la récupération des données.');
        }

        const groupedData = results.reduce((acc, row) => {
            if (!acc[row.horaire_id]) {
                acc[row.horaire_id] = {
                    horaire_id: row.horaire_id,
                    horaire_debut: row.horaire_debut,
                    horaire_fin: row.horaire_fin,
                    competences: {}
                };
            }

            if (!acc[row.horaire_id].competences[row.competence_id]) {
                acc[row.horaire_id].competences[row.competence_id] = {
                    competence_id: row.competence_id,
                    competence: row.competence,
                    jours: {}
                };
            }

            if (row.jour_id) {
                acc[row.horaire_id].competences[row.competence_id].jours[row.jour_id] = true;
            }

            return acc;
        }, {});

        res.json(Object.values(groupedData));
    });
});

router.post('/add-horaire-competence-jour', authenticateToken, (req, res) => {
    const { horaire_id, competence_id, jour_id, site_id } = req.body;

    if (!horaire_id || !competence_id || !jour_id || !site_id) {
        return res.status(400).send('Les champs horaire_id, competence_id, jour_id et site_id sont requis.');
    }

    const query = `
        INSERT INTO Thoraire_competence_jour (horaire_id, competence_id, jour_id)
        SELECT ?, ?, ?
        WHERE EXISTS (
            SELECT 1 FROM Thoraire_Tsite WHERE horaire_id = ? AND site_id = ?
        ) AND EXISTS (
            SELECT 1 FROM Tcompetence_Tsite WHERE competence_id = ? AND site_id = ?
        )
    `;

    connection.query(query, [horaire_id, competence_id, jour_id, horaire_id, site_id, competence_id, site_id], (err) => {
        if (err) {
            console.error('Erreur lors de l\'ajout de l\'association :', err.message);
            return res.status(500).send('Erreur lors de l\'ajout de l\'association.');
        }

        res.send('Association ajoutée avec succès.');
    });
});

router.post('/delete-horaire-competence-jour', authenticateToken, (req, res) => {
    const { horaire_id, competence_id, jour_id, site_id } = req.body;

    if (!horaire_id || !competence_id || !jour_id || !site_id) {
        return res.status(400).send('Les champs horaire_id, competence_id, jour_id et site_id sont requis.');
    }

    const query = `
        DELETE FROM Thoraire_competence_jour
        WHERE horaire_id = ? AND competence_id = ? AND jour_id = ?
        AND EXISTS (
            SELECT 1 FROM Thoraire_Tsite WHERE horaire_id = ? AND site_id = ?
        ) AND EXISTS (
            SELECT 1 FROM Tcompetence_Tsite WHERE competence_id = ? AND site_id = ?
        )
    `;

    connection.query(query, [horaire_id, competence_id, jour_id, horaire_id, site_id, competence_id, site_id], (err) => {
        if (err) {
            console.error('Erreur lors de la suppression de l\'association :', err.message);
            return res.status(500).send('Erreur lors de la suppression de l\'association.');
        }

        res.send('Association supprimée avec succès.');
    });
});

module.exports = router;