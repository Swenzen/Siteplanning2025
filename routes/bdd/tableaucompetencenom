const express = require('express');
const router = express.Router();
const connection = require('../../db');
const authenticateToken = require('../../middleware/auth');

// Route pour récupérer les compétences des personnes par site (protégée)
router.get('/competences-personnes', authenticateToken, (req, res) => {
    const siteId = req.query.site_id; // Récupérer le site_id depuis la requête
    const userSiteIds = req.user.siteIds; // Récupérer les siteIds autorisés depuis le token

    console.log('Requête reçue pour /competences-personnes :', { siteId, userSiteIds });

    // Vérifier que le site_id est dans la liste des sites autorisés
    if (!userSiteIds.includes(String(siteId))) {
        console.error('Accès refusé : site_id non autorisé');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site.');
    }

    const query = `
        SELECT n.nom_id, n.nom, c.competence_id, c.competence
        FROM Tnom n
        JOIN Tnom_Tsite nts ON n.nom_id = nts.nom_id
        LEFT JOIN Tcompetence_nom_Tsite cnt ON n.nom_id = cnt.nom_id AND cnt.site_id = ?
        LEFT JOIN Tcompetence c ON cnt.competence_id = c.competence_id
        WHERE nts.site_id = ?
    `;

    connection.query(query, [siteId, siteId], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des compétences des personnes :', err.message);
            return res.status(500).send('Erreur lors de la récupération des compétences des personnes');
        }

        const groupedData = results.reduce((acc, row) => {
            if (!acc[row.nom_id]) {
                acc[row.nom_id] = {
                    nom_id: row.nom_id,
                    nom: row.nom,
                    competences: []
                };
            }
            if (row.competence_id) {
                acc[row.nom_id].competences.push(row.competence_id);
            }
            return acc;
        }, {});

        res.json(Object.values(groupedData));
    });
});

// Route pour récupérer toutes les compétences (protégée)
router.get('/competences', authenticateToken, (req, res) => {
    const query = `
        SELECT competence_id, competence
        FROM Tcompetence
    `;

    connection.query(query, (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des compétences :', err.message);
            res.status(500).send('Erreur lors de la récupération des compétences');
        } else {
            res.json(results);
        }
    });
});

router.post('/add-competence', authenticateToken, (req, res) => {
    const { nom_id, competence_id, site_id } = req.body;
    const userSiteIds = req.user.siteIds; // Récupérer les siteIds autorisés depuis le token

    console.log('Requête reçue pour /add-competence :', { nom_id, competence_id, site_id, userSiteIds });

    if (!nom_id || !competence_id || !site_id) {
        return res.status(400).send('Les champs "nom_id", "competence_id" et "site_id" sont requis');
    }

    // Vérifier que le site_id est dans la liste des sites autorisés
    if (!userSiteIds.includes(String(site_id))) {
        console.error('Accès refusé : site_id non autorisé');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site');
    }

    const query = `
        INSERT INTO Tcompetence_nom_Tsite (nom_id, competence_id, site_id)
        VALUES (?, ?, ?)
    `;

    connection.query(query, [nom_id, competence_id, site_id], (err) => {
        if (err) {
            console.error('Erreur lors de l\'ajout de la compétence :', err.message);
            return res.status(500).send('Erreur lors de l\'ajout de la compétence');
        }

        res.send('Compétence ajoutée avec succès');
    });
});

// Route pour supprimer une compétence d'une personne pour un site (protégée)
router.post('/delete-competence2', authenticateToken, (req, res) => {
    const { nom_id, competence_id, site_id } = req.body;
    const userSiteIds = req.user.siteIds; // Récupérer les siteIds autorisés depuis le token

    console.log('Requête reçue pour /delete-competence2 :', { nom_id, competence_id, site_id, userSiteIds });

    if (!nom_id || !competence_id || !site_id) {
        return res.status(400).send('Les champs "nom_id", "competence_id" et "site_id" sont requis');
    }

    // Vérifier que le site_id est dans la liste des sites autorisés
    if (!userSiteIds.includes(String(site_id))) {
        console.error('Accès refusé : site_id non autorisé');
        return res.status(403).send('Accès refusé : Vous n\'avez pas accès à ce site');
    }

    const query = `
        DELETE FROM Tcompetence_nom_Tsite
        WHERE nom_id = ? AND competence_id = ? AND site_id = ?
    `;

    connection.query(query, [nom_id, competence_id, site_id], (err) => {
        if (err) {
            console.error('Erreur lors de la suppression de la compétence :', err.message);
            return res.status(500).send('Erreur lors de la suppression de la compétence');
        }

        res.send('Compétence supprimée avec succès');
    });
});

module.exports = router;