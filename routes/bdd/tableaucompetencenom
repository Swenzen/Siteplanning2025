const express = require('express');
const router = express.Router();
const connection = require('../../db');
const authenticateToken = require('../../middleware/auth');

// Route pour récupérer les compétences des personnes par site (protégée)
router.get('/competences-personnes', authenticateToken, (req, res) => {
    const siteId = req.user.siteIds[0]; // Récupérer le site_id depuis le token

    if (!siteId) {
        return res.status(400).send('Le site_id est introuvable dans le token');
    }

    const query = `
        SELECT n.nom_id, n.nom, c.competence_id, c.competence
        FROM Tnom n
        JOIN Tcompetence_nom_Tsite cnt ON n.nom_id = cnt.nom_id
        JOIN Tcompetence c ON cnt.competence_id = c.competence_id
        WHERE cnt.site_id = ?
    `;

    connection.query(query, [siteId], (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des compétences des personnes :', err.message);
            res.status(500).send('Erreur lors de la récupération des compétences des personnes');
        } else {
            res.json(results);
        }
    });
});

// Route pour récupérer toutes les compétences (protégée)
router.get('/competences', authenticateToken, (req, res) => {
    const query = `
        SELECT competence_id, competence
        FROM Tcompetence
    `;

    connection.query(query, (err, results) => {
        if (err) {
            console.error('Erreur lors de la récupération des compétences :', err.message);
            res.status(500).send('Erreur lors de la récupération des compétences');
        } else {
            res.json(results);
        }
    });
});

// Route pour ajouter une compétence à une personne pour un site (protégée)
router.post('/add-competence', authenticateToken, (req, res) => {
    const { nom_id, competence_id } = req.body;
    const siteId = req.user.siteIds[0]; // Récupérer le site_id depuis le token

    if (!nom_id || !competence_id || !siteId) {
        return res.status(400).send('Les champs "nom_id", "competence_id" et "site_id" sont requis');
    }

    const query = `
        INSERT INTO Tcompetence_nom_Tsite (nom_id, competence_id, site_id)
        VALUES (?, ?, ?)
    `;

    connection.query(query, [nom_id, competence_id, siteId], (err) => {
        if (err) {
            console.error('Erreur lors de l\'ajout de la compétence :', err.message);
            res.status(500).send('Erreur lors de l\'ajout de la compétence');
        } else {
            res.send('Compétence ajoutée avec succès');
        }
    });
});

// Route pour supprimer une compétence d'une personne pour un site (protégée)
router.post('/delete-competence', authenticateToken, (req, res) => {
    const { nom_id, competence_id } = req.body;
    const siteId = req.user.siteIds[0]; // Récupérer le site_id depuis le token

    if (!nom_id || !competence_id || !siteId) {
        return res.status(400).send('Les champs "nom_id", "competence_id" et "site_id" sont requis');
    }

    const query = `
        DELETE FROM Tcompetence_nom_Tsite
        WHERE nom_id = ? AND competence_id = ? AND site_id = ?
    `;

    connection.query(query, [nom_id, competence_id, siteId], (err) => {
        if (err) {
            console.error('Erreur lors de la suppression de la compétence :', err.message);
            res.status(500).send('Erreur lors de la suppression de la compétence');
        } else {
            res.send('Compétence supprimée avec succès');
        }
    });
});

module.exports = router;